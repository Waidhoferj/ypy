name: Build and Release

on:
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PACKAGE_NAME: y_py

jobs:
  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.11"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels - x86_64
        uses: messense/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist --sdist --find-interpreter
      - name: Build wheels - universal2
        uses: messense/maturin-action@v1
        with:
          args: --release --universal2 --out dist --find-interpreter
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
        python-version: ["3.7", "3.11"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, i686]
        python-version: ["3.7", "3.11"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist --find-interpreter
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  wasm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Match Python, version which is 3.10.2 since Pyodide 0.20.0
        # https://pyodide.org/en/stable/project/changelog.html#version-0-20-0
        python-version: ["3.10.2"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Install Rust
        # if this isn't here, wasm wheel build fails with error: failed to run `rustc` to learn about target-specific information
        uses: actions-rs/toolchain@v1
        with:
            # maturin build will generate args -Z link-native-libraries=no which is only accepted on nightly compiler
            toolchain: nightly
            profile: minimal
            override: true
      - name: Rustup add wasm32 target
        # maturin build --target wasm32-unknown-emscripten requires rust to add that target first
        run: rustup target add wasm32-unknown-emscripten
      - name: Setup emsdk
        uses: mymindstorm/setup-emsdk@v11
        with: 
          # Match  emscripten version, which is 3.1.14 since Pyodide 0.21.0
          # https://pyodide.org/en/stable/project/changelog.html#version-0-21-0
          version: 3.1.14 
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: wasm32-unknown-emscripten
          args: --release --out dist --find-interpreter
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist
     
  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - macos
      - windows
      - linux
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - uses: actions/setup-python@v2
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *
